{
  "version": 3,
  "sources": ["../../test/suite.test.ts"],
  "sourcesContent": ["import { assert, describe, expect, it } from 'vitest';\nimport { error, getParamNames } from './test_utils';\n\nconst add = (a: number, b: number) => a + b;\nconst sub = (a: number, b: number) => a - b;\nconst mul = (a: number, b: number) => a * b;\nconst div = (a: number, b: number) => a / b;\nconst mod = (a: number, b: number) => a % b;\n\nfunction mask(aa: number[], mm: number[]): number[] {\n  return aa.map((a, i) => (mm[i] ? a : 0));\n}\n\n/*\nYou are Cody, a Typescript programmer. You produce functional code in a code-golf style meaning you use short variable names. To name variables of type array you use 2 identical characters like \"aa\" and to name an element of that array you use the same character as a single character like \"a\". You produce code and tests following the pattern below:\n\nfunction mask(aa: number[], bb: number[]): number[] {\n  return aa.map((a, i) => bb[i] ? a : 0);\n}\n\nconst testCases = [\n  [[2, 5, 3, 0, 1], [0, 1, 0, 0, 1], [0, 5, 0, 0, 1]],\n  [[2, 5, 3, 0, 1], [0, 1, 1, 0, 1], [0, 5, 3, 0, 1]],\n];\n\ntests(mask, testCases);\n\nAcknowledge if you understood and ask me what I need you to implement.\n*/\n\n/*\nimplement mask(aa: number[], bb: number[]): number[] that transforms the given inputs to the given outputs with tests using assert from Chai:\n[2,5,3,0,1], [0,0,0,0,0] => [0,0,0,0,0]\n[2,5,3,0,1], [0,1,0,0,1] => [0,5,0,0,1]\n[2,5,3,0,1], [0,1,1,0,1] => [0,5,3,0,1]\n[2,5,3,0,1], [1,1,1,1,1] => [2,5,3,0,1]\n*/\n\n/*\nimplement mask(aa: number[], bb: number[]): number[] that transforms the given inputs to the given outputs as specified in this testCases:\n\nconst testCases = [\n  [\n    [2, 5, 3, 0, 1],//aa\n    [0, 0, 0, 0, 0],//mm\n    [0, 0, 0, 0, 0],//expect\n  ],\n  [\n    [2, 5, 3, 0, 1],//aa\n    [0, 1, 0, 0, 1],//mm\n    [0, 5, 0, 0, 1],//expect\n  ],\n  [\n    [2, 5, 3, 0, 1],//aa\n    [0, 1, 1, 0, 1],//mm\n    [0, 5, 3, 0, 1],//expect\n  ],\n  [\n    [2, 5, 3, 0, 1],//aa\n    [1, 1, 1, 1, 1],//mm\n    [2, 5, 3, 0, 2],//expect\n  ],\n];\n*/\n\nconst testCases = [\n  [\n    [2, 5, 3, 0, 1], //aa\n    [0, 0, 0, 0, 0], //mm\n    [0, 0, 0, 0, 0], //expect\n  ],\n  [\n    [2, 5, 3, 0, 1], //aa\n    [0, 1, 0, 0, 1], //mm\n    [0, 5, 0, 0, 1], //expect\n  ],\n  [\n    [2, 5, 3, 0, 1], //aa\n    [0, 1, 1, 0, 1], //mm\n    [0, 5, 3, 0, 1], //expect\n  ],\n  [\n    [2, 5, 3, 0, 1], //aa\n    [1, 1, 1, 1, 1], //mm\n    [2, 5, 3, 0, 2], //expect\n  ],\n];\n\nfunction tests(fn: any, testCases: any[][]) {\n  testCases.forEach((testCase) => {\n    const fnInputs = testCase.slice(0, testCase.length - 1);\n    const expect = testCase[testCase.length - 1];\n    it('works with given examples', () => {\n      const result = fn.apply(this, fnInputs);\n      assert.deepEqual(result, expect, error(fn, result, expect, ...fnInputs));\n    });\n  });\n}\n\ndescribe('mask', () => {\n  tests(mask, testCases);\n  // testCases.forEach(([aa, mm, expect]) => {\n  //   it(\"works with given examples\", () => {\n  //     const result = mask(aa, mm);\n  //     assert.deepEqual(result, expect, error(mask, result, expect, aa, mm));\n  //   });\n  // });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,oBAA6C;AAC7C,wBAAqC;AAErC,MAAM,MAAM,CAAC,GAAW,MAAc,IAAI;AAC1C,MAAM,MAAM,CAAC,GAAW,MAAc,IAAI;AAC1C,MAAM,MAAM,CAAC,GAAW,MAAc,IAAI;AAC1C,MAAM,MAAM,CAAC,GAAW,MAAc,IAAI;AAC1C,MAAM,MAAM,CAAC,GAAW,MAAc,IAAI;AAE1C,cAAc,IAAc,IAAwB;AAClD,SAAO,GAAG,IAAI,CAAC,GAAG,MAAO,GAAG,KAAK,IAAI;AAAA;AAuDvC,MAAM,YAAY;AAAA,EAChB;AAAA,IACE,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,EAEf;AAAA,IACE,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,EAEf;AAAA,IACE,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,EAEf;AAAA,IACE,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,IACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA;AAIjB,eAAe,IAAS,YAAoB;AAC1C,aAAU,QAAQ,CAAC,aAAa;AAC9B,UAAM,WAAW,SAAS,MAAM,GAAG,SAAS,SAAS;AACrD,UAAM,UAAS,SAAS,SAAS,SAAS;AAC1C,0BAAG,6BAA6B,MAAM;AACpC,YAAM,SAAS,GAAG,MAAM,MAAM;AAC9B,2BAAO,UAAU,QAAQ,SAAQ,6BAAM,IAAI,QAAQ,SAAQ,GAAG;AAAA;AAAA;AAAA;AAKpE,4BAAS,QAAQ,MAAM;AACrB,QAAM,MAAM;AAAA;",
  "names": []
}
