{
  "version": 3,
  "sources": ["../../test/test_utils.ts"],
  "sourcesContent": ["import { STRIP_COMMENTS, STRIP_KEYWORDS, ARGUMENT_NAMES, ARGUMENT_SPLIT } from './suite.test';\n\nexport const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*.*\\*\\/))/gm;\nexport const STRIP_KEYWORDS = /(\\s*async\\s*|\\s*function\\s*)+/;\nexport const ARGUMENT_NAMES =\n  /\\(([^)]+)\\)\\s*=>|([a-zA-Z_$]+)\\s*=>|[a-zA-Z_$]+\\(([^)]+)\\)|\\(([^)]+)\\)/;\nexport const ARGUMENT_SPLIT = /[ ,\\n\\r\\t]+/;\n\nexport function getParamNames(func: any) {\n  const fnStr = func\n    .toString()\n    .replace(STRIP_COMMENTS, '')\n    .replace(STRIP_KEYWORDS, '')\n    .trim();\n  const matches = ARGUMENT_NAMES.exec(fnStr);\n  var match: string;\n  if (matches) {\n    for (var i = 1; i < matches.length; i++) {\n      if (matches[i]) {\n        match = matches[i];\n        break;\n      }\n    }\n  }\n  if (match === undefined) {\n    return [];\n  }\n  return match.split(ARGUMENT_SPLIT).filter((part) => part !== '');\n}\n\nexport function error(fn: any, result: any, expect: any, ...inputs: any[]) {\n  let params = getParamNames(fn);\n  let text = 'inputs:';\n  inputs.forEach((val, i) => (text += `\\n ${inputs[i]} ${params[i]}`));\n  return (text += `\\n ${expect} expect\\n ${result} result`);\n}\n\n// function prepend(char: string, text: string, expectedSize: number): string {\n//   if (expectedSize - text.length <= 0) {\n//     return text;\n//   }\n//   const arr = new Array(expectedSize - text.length).fill(char);\n//   return arr.join('') + text;\n// }\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,iBAAiB;AACvB,MAAM,iBAAiB;AACvB,MAAM,iBACX;AACK,MAAM,iBAAiB;AAEvB,uBAAuB,MAAW;AACvC,QAAM,QAAQ,KACX,WACA,QAAQ,gBAAgB,IACxB,QAAQ,gBAAgB,IACxB;AACH,QAAM,UAAU,eAAe,KAAK;AACpC,MAAI;AACJ,MAAI,SAAS;AACX,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAI,QAAQ,IAAI;AACd,gBAAQ,QAAQ;AAChB;AAAA;AAAA;AAAA;AAIN,MAAI,UAAU,QAAW;AACvB,WAAO;AAAA;AAET,SAAO,MAAM,MAAM,gBAAgB,OAAO,CAAC,SAAS,SAAS;AAAA;AAGxD,eAAe,IAAS,QAAa,WAAgB,QAAe;AACzE,MAAI,SAAS,cAAc;AAC3B,MAAI,OAAO;AACX,SAAO,QAAQ,CAAC,KAAK,MAAO,QAAQ;AAAA,GAAM,OAAO,MAAM,OAAO;AAC9D,SAAQ,QAAQ;AAAA,GAAM;AAAA,GAAmB;AAAA;",
  "names": []
}
